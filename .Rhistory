summarise_all(mean)
view(meancancelsLT)
scatterplot = ggplot(meancancelsLT, aes (x = lead_time , y = is_canceled))
scatterplot + geom_point() + xlim(0, 750) + ylim(0, 1)
LTscatterplot = ggplot(meancancelsLT, aes (x = lead_time , y = is_canceled))
LTscatterplot + geom_point() + xlim(0, 750) + ylim(0, 1)
hotelMS = hotel_data %>%
select(market_segment, is_canceled)
str(hotelMS)
meancancelsMS = hotelMS %>%
group_by(market_segment) %>%
summarise_all(mean)
view (meancancelsMS)
counts <- table(hotelMS$is_canceled, hotelMS$market_segment)
barplot(counts, main="insights on breakdown of market segment and cancellations",
xlab="market_segment", col=c("darkblue","red"),
legend = rownames(counts))
counts <- table(hotelMS$is_canceled, hotelMS$market_segment)
barplot(counts, main="insights on breakdown of market segment and cancellations",
xlab="market_segment", col=c("darkblue","red"),
legend = rownames(counts), beside=TRUE)
counts <- table(hotelMS$is_canceled, hotelMS$market_segment)
barplot(counts, main="Number of Cancellations by Market Segment",
xlab="market_segment",
legend = rownames(counts), beside=TRUE)
counts <- table(hotelMS$is_canceled, hotelMS$market_segment)
barplot(counts, main="Number of Cancellations by Market Segment",
xlab="market_segment", col=default,
legend = rownames(counts), beside=TRUE)
counts <- table(hotelMS$is_canceled, hotelMS$market_segment)
barplot(counts, main="Number of Cancellations by Market Segment",
xlab="market_segment",
theme_classic(),
legend = rownames(counts), beside=TRUE)
counts <- table(hotelMS$is_canceled, hotelMS$market_segment)
barplot(counts, main="Number of Cancellations by Market Segment",
xlab="market_segment",
legend = rownames(counts), beside=TRUE)
counts <- table(hotelMS$is_canceled, hotelMS$market_segment)
barplot(counts, main="Number of Cancellations by Market Segment" + theme_classic(),
xlab="market_segment",
legend = rownames(counts), beside=TRUE)
counts <- table(hotelMS$is_canceled, hotelMS$market_segment)
barplot(counts, main="Number of Cancellations by Market Segment",
xlab="market_segment",
legend = rownames(counts), beside=TRUE)
counts <- table(hotelMS$is_canceled, hotelMS$market_segment)
barplot(counts, main="Number of Cancellations by Market Segment" +
xlab="market_segment" +
counts <- table(hotelMS$is_canceled, hotelMS$market_segment)
barplot(counts, main="Number of Cancellations by Market Segment",
xlab="market_segment",
legend = rownames(counts), beside=TRUE)
counts <- table(hotelMS$is_canceled, hotelMS$market_segment)
barplot(counts, main="Number of Cancellations by Market Segment",
xlab="market_segment",
legend = rownames(counts), beside=TRUE) + theme_classic()
counts <- table(hotelMS$is_canceled, hotelMS$market_segment)
barplot(counts, main="Number of Cancellations by Market Segment",
xlab="market_segment",
legend = rownames(counts), beside=TRUE) + theme_classic()
counts <- table(hotelMS$is_canceled, hotelMS$market_segment) + theme_classic()
barplot(counts, main="Number of Cancellations by Market Segment",
xlab="market_segment",
legend = rownames(counts), beside=TRUE)
counts <- table(hotelMS$is_canceled, hotelMS$market_segment)
barplot(counts, main="Number of Cancellations by Market Segment",
xlab="market_segment",
legend = rownames(counts), beside=TRUE)
counts <- table(hotelMS$is_canceled, hotelMS$market_segment)
barplot(counts, main="Number of Cancellations by Market Segment",
xlab="market_segment", cos=c("green", "red")
legend = rownames(counts), beside=TRUE)
counts <- table(hotelMS$is_canceled, hotelMS$market_segment)
barplot(counts, main="Number of Cancellations by Market Segment",
xlab="market_segment", cos=c("green", "red"),
legend = rownames(counts), beside=TRUE)
counts <- table(hotelMS$is_canceled, hotelMS$market_segment)
barplot(counts, main="Number of Cancellations by Market Segment",
xlab="market_segment", col=c("green", "red"),
legend = rownames(counts), beside=TRUE)
counts <- table(hotelMS$is_canceled, hotelMS$market_segment)
barplot(counts, main="Number of Cancellations by Market Segment",
xlab="market_segment", col=c("blue", "red"),
legend = rownames(counts), beside=TRUE)
LTscatterplot = ggplot(meancancelsLT, aes (x = lead_time , y = is_canceled))
LTscatterplot + geom_point() + xlim(0, 750) + ylim(0, 1) + theme_classic()
LTscatterplot = ggplot(meancancelsLT, aes (x = lead_time , y = is_canceled))
LTscatterplot + geom_point() + xlim(0, 750) + ylim(0, 1) + geom_smooth(method=lm)
hotelDC = hotel_data %>%
select(distribution_channel, is_canceled)
str(hotelDC)
meancancelsDC = hotelDC %>%
group_by(distribution_channel) %>%
summarise_all(mean)
view (meancancelsDC)
countsDC <- table(hotelDC$is_canceled, hotelDC$distribution_channel)
barplot(counts, main="Breakdown of distribution channel and cancellations",
xlab="distribution_channel", col=c("darkblue","red"),
legend = rownames(hotelDC), beside=TRUE)
countsDC <- table(hotelDC$is_canceled, hotelDC$distribution_channel)
barplot(counts, main="Breakdown of distribution channel and cancellations",
xlab="distribution_channel", col=c("darkblue","red"),
legend = rownames(counts), beside=TRUE)
hotelMS = hotel_data %>%
select(market_segment, is_canceled)
#str(hotelMS)
meancancelsMS = hotelMS %>%
group_by(market_segment) %>%
summarise_all(mean)
#view (meancancelsMS)
counts <- table(hotelMS$is_canceled, hotelMS$market_segment)
barplot(counts, main="Number of Cancellations by Market Segment",
xlab="market segment", col=c("blue", "red"),
ylab="number of cancellations"
legend = rownames(counts), beside=TRUE)
hotelMS = hotel_data %>%
select(market_segment, is_canceled)
#str(hotelMS)
meancancelsMS = hotelMS %>%
group_by(market_segment) %>%
summarise_all(mean)
#view (meancancelsMS)
counts <- table(hotelMS$is_canceled, hotelMS$market_segment)
barplot(counts, main="Number of Cancellations by Market Segment",
xlab="market_segment", col=c("blue", "red"),
legend = rownames(counts), beside=TRUE)
countsDC <- table(hotelDC$is_canceled, hotelDC$distribution_channel)
barplot(counts, main="Number of Cancellations by Distribution Channel",
xlab="distribution_channel", col=c("darkgreen","pink"),
legend = rownames(counts), beside=TRUE)
countsDC <- table(hotelDC$is_canceled, hotelDC$distribution_channel)
barplot(counts, main="Number of Cancellations by Distribution Channel",
xlab="distribution_channel", col=c("darkgreen","orange"),
legend = rownames(counts), beside=TRUE)
countsDC <- table(hotelDC$is_canceled, hotelDC$distribution_channel)
barplot(counts, main="Number of Cancellations by Distribution Channel",
xlab="distribution_channel", col=c("darkgreen","red"),
legend = rownames(counts), beside=TRUE)
truecancel = aggregate(is_canceled ~ lead_time, data = hotel_data, sum)
str(truecancel)
view(truecancel)
scatterplot = ggplot(truecancel, aes (x = lead_time , y = is_canceled))
scatterplot + geom_point()
scatterplot = ggplot(hotel_data, aes (x = adr , y = lead_time))
scatterplot + geom_point() + xlim(0, 750) + ylim(0, 700)
scatterplot = ggplot(meancancelsLT, aes (x = lead_time , y = is_canceled))
scatterplot + geom_point() + xlim(0, 750) + ylim(0, 1)
meancancelsLT1 = hotelLT %>%
group_by(lead_time) %>%
summarise_all(list(min,max,mean)) %>%
hotel_clean =  data %>% filter(hotel == 'City Hotel')
hotel_clean$children[is.na(hotel_clean$children)] = 0
hotel_clean = subset(hotel_clean, select=-c(company, reservation_status_date, hotel, reservation_status))
str(hotel_clean)
library(dplyr)
library(rpart)
library(rpart.plot)
library(caret)
library(e1071)
library(ROCR)
library(plyr)
library(randomForest)
hotel_clean$arrival_date_month = as.factor(hotel_clean$arrival_date_month)
hotel_clean[12:15] = lapply(hotel_clean[12:15], as.factor)
hotel_clean[19:20] = lapply(hotel_clean[19:20], as.factor)
hotel_clean[22:23] = lapply(hotel_clean[22:23], as.factor)
hotel_clean$customer_type = as.factor(hotel_clean$customer_type)
hotel_forest = hotel_clean
hotel_forest$is_canceled = as.factor(hotel_forest$is_canceled)
str(hotel_forest)
library(caTools)
set.seed(144)
split = sample.split(hotel_forest$is_canceled, SplitRatio = 0.7)
hotel_train = subset(hotel_forest, split == TRUE)
hotel_test = subset(hotel_forest, split == FALSE)
set.seed(144)
HotelForest = randomForest(is_canceled ~ .-country-agent, data = hotel_train, ntree = 50, nodesize = 1, mtry = 8 )
predictforest = predict(HotelForest, newdata = hotel_test, type = "prob")
dim(predictforest)
predhotelforest = prediction(predictforest[,2], hotel_test$is_canceled)
perftrain = performance(predhotelforest, "tpr", "fpr")
plot(perftrain)
auctraintree = performance(predhotelforest, "auc")
auctraintree@y.values[[1]]
set.seed(144)
HotelForest = randomForest(is_canceled ~ .-country-agent, data = hotel_train, ntree = 50, nodesize = 1, mtry = 5 )
predictforest = predict(HotelForest, newdata = hotel_test, type = "prob")
dim(predictforest)
predhotelforest = prediction(predictforest[,2], hotel_test$is_canceled)
perftrain = performance(predhotelforest, "tpr", "fpr")
plot(perftrain)
auctraintree = performance(predhotelforest, "auc")
auctraintree@y.values[[1]]
set.seed(144)
HotelForest = randomForest(is_canceled ~ .-country-agent, data = hotel_train, ntree = 50, nodesize = 1, mtry = 8 )
predictforest = predict(HotelForest, newdata = hotel_test, type = "prob")
dim(predictforest)
predhotelforest = prediction(predictforest[,2], hotel_test$is_canceled)
perftrain = performance(predhotelforest, "tpr", "fpr")
plot(perftrain)
auctraintree = performance(predhotelforest, "auc")
auctraintree@y.values[[1]]
fitControl = trainControl(method="CV", number=5, classProbs = TRUE, summaryFunction = twoClassSummary)
cpGrid = expand.grid(.cp = ((1:10)*0.00001))
set.seed(144)
cvtrain = train(is_canceled ~ ., data = hotel_train, method = "rpart", trControl = fitControl, tuneGrid = cpGrid, metric="ROC")
set.seed(144)
cvtrain = train(is_canceled ~ ., data = hotel_train, method = "rpart", trControl = fitControl, tuneGrid = cpGrid, metric="ROC")
hotel_clean$arrival_date_month = as.factor(hotel_clean$arrival_date_month)
hotel_clean[12:15] = lapply(hotel_clean[12:15], as.factor)
hotel_clean[19:20] = lapply(hotel_clean[19:20], as.factor)
hotel_clean[22:23] = lapply(hotel_clean[22:23], as.factor)
hotel_clean$customer_type = as.factor(hotel_clean$customer_type)
hotel_forest = hotel_clean
hotel_forest$is_canceled = as.factor(hotel_forest$is_canceled)
str(hotel_forest)
hotel_clean$arrival_date_month = revalue(hotel_clean$arrival_date_month, c("0"="No", "1"="Yes"))
hotel_clean$arrival_date_month = revalue(hotel_clean$arrival_date_month, c("0"="No", "1"="Yes"))
hotel_clean
hotel_clean$arrival_date_month = revalue(hotel_clean$arrival_date_month, c("0"="No", "1"="Yes"))
str(hotel_clean)
hotel_clean$is_canceled = revalue(hotel_clean$is_canceled, c("0"="No", "1"="Yes"))
hotel_forest$is_canceled = revalue(hotel_forest$is_canceled, c("0"="No", "1"="Yes"))
str(hotel_clean)
hotel_forest$is_canceled = revalue(hotel_forest$is_canceled, c("0"="No", "1"="Yes"))
str(hotel_forest)
set.seed(144)
cvtrain = train(is_canceled ~ ., data = hotel_train, method = "rpart", trControl = fitControl, tuneGrid = cpGrid, metric="ROC")
data$arrival_date_month= as.factor(hotel_data$arrival_date_month)
data$arrival_date_month = factor(hotel_data$arrival_date_month, levels = month.name)
city_data = subset(hotel_data, hotel == "City Hotel")
resort_data = subset(hotel_data, hotel == "Resort Hotel")
city_table = table(city_data$is_canceled,city_data$arrival_date_month)
city_table_canceled = city_table[-1,]
resort_table = table(resort_data$is_canceled,resort_data$arrival_date_month)
resort_table_canceled = resort_table[-1,]
city_canceled_data = subset(city_data, is_canceled == 1)
resort_canceled_data = subset(resort_data, is_canceled == 1)
city_bar_cancel = ggplot(data=city_canceled_data,aes(arrival_date_month)) +
geom_bar() +
ggtitle("Cancellation per month for City Hotel")+
geom_text(aes(label = ..count..), stat = "count", vjust = 1.5, colour = "white")
city_bar_cancel
resort_bar_cancel = ggplot(data=resort_canceled_data,aes(arrival_date_month)) +
geom_bar()+
ggtitle("Cancellation per month for Resort Hotel")+
geom_text(aes(label = ..count..), stat = "count", vjust = 1.5, colour = "white")
resort_bar_cancel
hotel_data$arrival_date_month = factor(data$arrival_date_month, levels = month.name)
city_data = subset(hotel_data, hotel == "City Hotel")
resort_data = subset(hotel_data, hotel == "Resort Hotel")
city_table = table(city_data$is_canceled,city_data$arrival_date_month)
city_table_canceled = city_table[-1,]
resort_table = table(resort_data$is_canceled,resort_data$arrival_date_month)
resort_table_canceled = resort_table[-1,]
city_canceled_data = subset(city_data, is_canceled == 1)
resort_canceled_data = subset(resort_data, is_canceled == 1)
city_bar_cancel = ggplot(data=city_canceled_data,aes(arrival_date_month)) +
geom_bar() +
ggtitle("Cancellation per month for City Hotel")+
geom_text(aes(label = ..count..), stat = "count", vjust = 1.5, colour = "white")
city_bar_cancel
resort_bar_cancel = ggplot(data=resort_canceled_data,aes(arrival_date_month)) +
geom_bar()+
ggtitle("Cancellation per month for Resort Hotel")+
geom_text(aes(label = ..count..), stat = "count", vjust = 1.5, colour = "white")
resort_bar_cancel
hotel_forest$is_canceled = as.factor(hotel_forest$is_canceled)
str(hotel_forest)
set.seed(144)
cvtrain = train(is_canceled ~ ., data = hotel_forest, method = "rpart", trControl = fitControl, tuneGrid = cpGrid, metric="ROC")
cvtrain
cust.summary <- hotel_data %>%
filter(is_canceled == 0) %>%
group_by(arrival_date_year,is_repeated_guest) %>%
summarize(cust.count = sum(as.numeric(is_repeated_guest))) %>%
transmute(Customer.Type = ifelse(is_repeated_guest == 0,'Existing','New'),
avg.weekly.cust = case_when(arrival_date_year == '2015' ~ round(cust.count/27),
arrival_date_year == '2017' ~ round(cust.count/35),
TRUE ~ round(cust.count/53)))
cust.summary <- hotel_data %>%
filter(is_canceled == 0) %>%
group_by(arrival_date_year,is_repeated_guest) %>%
summarize(cust.count = sum(as.numeric(is_repeated_guest))) %>%
transmute(Customer.Type = ifelse(is_repeated_guest == 0,'Existing','New'),
avg.weekly.cust = case_when(arrival_date_year == '2015' ~ round(cust.count/27),
arrival_date_year == '2017' ~ round(cust.count/35),
TRUE ~ round(cust.count/53)))
packages = c('ggplot2', 'dplyr', 'reticulate', 'readr')
for (p in packages){
if(!require(p, character.only = T)){
install.packages(p)
}
library(p, character.only = T)
}
library(scales)
library(tidyverse)
library(zeallot)
library(ISLR)
library(caret)
library(rpart)
library(rpart.plot)
library(rattle)
library(GoodmanKruskal)
library(arm)
library(randomForest)
library(lubridate)
library(ROCR)
data = read.csv("hotel_bookings.csv")
hotel_data = data.frame(data)
str(hotel_data)
hotel_data[sapply(hotel_data, is.character)] = lapply(hotel_data[sapply(hotel_data, is.character)], as.factor)
str(hotel_data)
summary(hotel_data)
hotel_data %>%
select(everything()) %>%  # replace to your needs
summarise_all(funs(sum(is.na(.))))
cust.summary <- hotel_data %>%
filter(is_canceled == 0) %>%
group_by(arrival_date_year,is_repeated_guest) %>%
summarize(cust.count = sum(as.numeric(is_repeated_guest))) %>%
transmute(Customer.Type = ifelse(is_repeated_guest == 0,'Existing','New'),
avg.weekly.cust = case_when(arrival_date_year == '2015' ~ round(cust.count/27),
arrival_date_year == '2017' ~ round(cust.count/35),
TRUE ~ round(cust.count/53)))
room.summary <- hotel_data %>%
filter(is_canceled == 0) %>%
group_by(reserved_room_type) %>%
summarize(room_count = n()) %>%
arrange(-room_count)
ggplot(data = hotel_data,aes(total_of_special_requests,fill = (is_canceled))) +
geom_bar(position = 'dodge') +
scale_y_continuous(name = "Counts",labels = scales::comma) +
xlab("Number of Special Request") +
ggtitle("Total Special Request vs Booking Cancellation Status") +
labs(fill = 'is cancelled')
ggplot(data = hotel_data,aes(is_canceled,fill = (is_repeated_guest))) +
geom_bar(position = 'dodge') +
scale_y_continuous(name = "Counts",labels = scales::comma) +
xlab("Is Cancelled") +
ggtitle("Cancelled or Not") +
labs(fill = 'is repeated guest')
cust.summary <- hotel_data %>%
filter(is_canceled == 0) %>%
group_by(arrival_date_year,is_repeated_guest) %>%
summarize(cust.count = sum(as.numeric(is_repeated_guest))) %>%
transmute(Customer.Type = ifelse(is_repeated_guest == 0,'Existing','New'),
avg.weekly.cust = case_when(arrival_date_year == '2015' ~ round(cust.count/27),
arrival_date_year == '2017' ~ round(cust.count/35),
TRUE ~ round(cust.count/53)))
room.summary <- hotel_data %>%
filter(is_canceled == 0) %>%
group_by(reserved_room_type) %>%
summarize(room_count = n()) %>%
arrange(-room_count)
table(hotel_data$hotel)
table(hotel_data$is_canceled, hotel_data$hotel)
packages = c('ggplot2', 'dplyr', 'reticulate', 'readr', 'tidyverse', 'ggcorrplot', 'rpart', 'rpart.plot', 'caret', 'e1071', 'ROCR', 'plyr', 'randomForest', 'caTools')
for (p in packages){
if(!require(p, character.only = T)){
install.packages(p)
}
library(p, character.only = T)
}
packages = c('ggplot2', 'dplyr', 'reticulate', 'readr', 'tidyverse', 'ggcorrplot', 'rpart', 'rpart.plot', 'caret', 'e1071', 'ROCR', 'plyr', 'randomForest', 'caTools')
for (p in packages){
if(!require(p, character.only = T)){
install.packages(p)
}
library(p, character.only = T)
}
data = read.csv("hotel_bookings.csv")
hotel_data = data.frame(data)
str(hotel_data)
hotel_data[sapply(hotel_data, is.character)] = lapply(hotel_data[sapply(hotel_data, is.character)], as.factor)
str(hotel_data)
summary(hotel_data)
hotel_data %>%
select(everything()) %>%  # replace to your needs
summarise_all(funs(sum(is.na(.))))
hotel_data %>%
select(everything()) %>%  # replace to your needs
summarise_all(funs(sum(is.na(.))))
hotel_data %>%
select(.) %>%  # replace to your needs
summarise_all(funs(sum(is.na(.))))
hotel_data %>%
select(.~) %>%  # replace to your needs
hotel_data %>%
select(everything()) %>%  # replace to your needs
summarise_all(funs(sum(is.na(.))))
hotel_data %>%
select(everything()) %>%  # replace to your needs
summarise_all(funs(sum(is.na(.))))
hotel_data[sapply(hotel_data, is.character)] = lapply(hotel_data[sapply(hotel_data, is.character)], as.factor)
#str(hotel_data)
#summary(hotel_data)
hotel_data %>%
select(everything()) %>%  # replace to your needs
summarise_all(funs(sum(is.na(.))))
hotel_data %>%
select(everything()) %>%  # replace to your needs
summarise_all(funs(sum(is.na(.))))
hotel_data %>%
select(everything()) %>%  # replace to your needs
summarise_all(funs(sum(is.na(.))))
hotel_data %>%
select(everything()) %>%  # replace to your needs
summarise_all(funs(sum(is.na(.))))
n <- length(hotel_data$children)
for (i in 1:n) {
if (is.na(hotel_data$children[i]))
hotel_data$children[i] <- hotel_data$babies[i]
}
hotel_data %>%
select(everything()) %>%  # replace to your needs
summarise_all(funs(sum(is.na(.))))
n = length(hotel_data$children)
for (i in 1:n) {
if (is.na(hotel_data$children[i]))
hotel_data$children[i] = hotel_data$babies[i]
}
n = length(hotel_data$children)
for (i in 1:n) {
if (is.na(hotel_data$children[i]))
hotel_data$children[i] = hotel_data$babies[i]
}
n = length(hotel_data$children)
for (i in 1:n) {
if (is.na(hotel_data$children[i]))
hotel_data$children[i] = hotel_data$babies[i]
}
summary(hotel_data)
df_numeric_data <- dplyr::select_if(hotel_data, is.numeric)
r = cor(df_numeric_data)
ggcorrplot(r,
hc.order = TRUE,
type = "lower",
lab = TRUE)
table(hotel_data$hotel)
table(hotel_data$is_canceled, hotel_data$hotel)
hotelLT = hotel_data %>%
select(lead_time, is_canceled)
hotelLT = hotel_data %>%
select(lead_time, is_canceled)
hotelLT = hotel_data %>%
select(lead_time, is_canceled)
LTscatterplot = ggplot(meancancelsLT, aes (x = lead_time , y = is_canceled))
hotel_data[sapply(hotel_data, is.character)] = lapply(hotel_data[sapply(hotel_data, is.character)], as.factor)
str(hotel_data)
#summary(hotel_data)
hotelLT = hotel_data %>%
select(lead_time, is_canceled)
hotel_data = data.frame(data)
str(hotel_data)
data = read.csv("hotel_bookings.csv")
hotel_data = data.frame(data)
str(hotel_data)
n = length(hotel_data$children)
for (i in 1:n) {
if (is.na(hotel_data$children[i]))
hotel_data$children[i] = hotel_data$babies[i]
}
#summary(hotel_data)
df_numeric_data <- dplyr::select_if(hotel_data, is.numeric)
r = cor(df_numeric_data)
ggcorrplot(r,
hc.order = TRUE,
type = "lower",
lab = TRUE)
table(hotel_data$hotel)
table(hotel_data$is_canceled, hotel_data$hotel)
ggplot(data = hotel_data,
aes(
x = hotel,
y = prop.table(stat(count)),
fill = factor(is_canceled),
label = scales::percent(prop.table(stat(count)))
)) +
geom_bar(position = position_dodge()) +
geom_text(
stat = "count",
position = position_dodge(.9),
vjust = -0.5,
size = 2.5
) +
scale_y_continuous(labels = scales::percent) +
labs(title = "Proportion of Bookings by Hotel Type",
x = "Hotel Type",
y = "% of Total Bookings") +
theme_classic() +
scale_fill_discrete(
name = "Booking Status",
breaks = c("0", "1"),
labels = c("Not Cancelled", "Cancelled")
)
hotelLT = hotel_data %>%
select(lead_time, is_canceled)
hotelLT = hotel_data %>%
select(lead_time, is_canceled)
hotelLT = hotel_data %>%
select(lead_time, is_canceled)
hotelLT = hotel_data %>%
select(lead_time, is_canceled)
hotel = read.csv("hotel_bookings.csv")
str(hotel)
hotelLT = hotel %>%
select(lead_time, is_canceled)
data = read.csv("hotel_bookings.csv")
hotel_data = data.frame(data)
str(hotel_data)
